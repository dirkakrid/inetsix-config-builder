groups {
    re0 {
        system {
            host-name {{hostname}}-re0;
        }
        interfaces {
            fxp0 {
                unit 0 {
                    family inet {
                        address {{fxp0_re0}};
                    }
                }
            }
        }
    }
    re1 {
        system {
            host-name {{hostname}}-re1;
        }
        interfaces {
            fxp0 {
                unit 0 {
                    family inet {
                        address {{fxp0_re1}};
                    }
                }
            }
        }
    }
}
apply-groups [ re0 re1 ];
system {
    services {
        ssh {
            root-login allow;
        }
        netconf {
            ssh;
        }
    }
    commit synchronize;
    ntp {
        peer {{ntp_server}};
    }
}
interfaces {
    /* Downlinks to all spines */
    {%- for DOWNLINK in DOWNLINKS %}
    {{ DOWNLINK }} {
        description "{{DOWNLINKS[DOWNLINK]['description']}}";
        mtu {{DOWNLINKS[DOWNLINK]['mtu']}};
        unit 0 {
            family inet {
                address {{DOWNLINKS[DOWNLINK]['ip']}};
            }
        }
    }
    {%- endfor %}
    /* IRB for all vlans running in EVPN */
    irb {
        {%- for VLAN in VLANS %}
        unit {{ VLAN }} {
            description "{{VLANS[VLAN]['description']}}";
            address {{VLANS[VLAN]['address']}} { 
                virtual-gateway-address: {{VLANS[VLAN]['gateway']}};
            }
        {%- endfor %}
    }
    lo0 {
        unit 0 {
            family inet {
                address {{loopback}};
            }
        }
    }
}
routing-options {
    static {
        route 0.0.0.0/0 next-hop {{default_gateway}};
    }
    router-id {{loopback}};
    forwarding-table {
        export bgp-ecmp;
    }
}
protocols {
    bgp {
        group UNDERLAY-EBGP-FAB {
            type external;
            import bgp-underlay-in;
            family inet {
                unicast;
            }
            export bgp-underlay-out;
            local-as {{asn_underlay}};
            graceful-restart;
            bfd-liveness-detection {
                minimum-interval 350;
                multiplier 3;
                session-mode single-hop;
            }
            multipath multiple-as;
            {%- for PEER in BGP_UNDERLAY_PEERS %}
            neighbor {{PEER}} { 
                peer-as {{BGP_UNDERLAY_PEERS[PEER]['asn']}};
                description "{{BGP_UNDERLAY_PEERS[PEER]['description']}}";
            }
            {%- endfor %}
        }
        group OVERLAY-iBGP {
            type internal;
            local-address {{loopback}};
            family inet-vpn {
                unicast;
            }
            family evpn {
                signaling;
            }
            cluster {{loopback}};
            local-as {{asn_overlay}};
            bfd-liveness-detection {
                minimum-interval 350;
                multiplier 3;
                session-mode automatic;
            }
            multipath;
            {%- for PEER in BGP_OVERLAY_PEERS %}
            neighbor {{PEER}} { 
                description "{{BGP_OVERLAY_PEERS[PEER]['description']}}";
            }
            {%- endfor %}
        }
    }
    lldp {
        interface all;
    }
}
policy-options {
    {%- for TENANT in TENANTS %}
    policy-statement {{TENANT}}_LEAF_IN {
        term {{TENANT}} {
            from community {{TENANTS[TENANT]['community_name']}};
            then accept;
        }
        {%- for VNI in TENANTS[TENANT].VNIS  %}
        term {{TENANT}}_vni{{VNI}} {
            from community {{TENANTS[TENANT].VNIS[VNI]['community_name']}};
            then accept;
        }{%endfor%}
        term ESI {
            from community commEsi;
            then accept;
        }
        then reject;
    }{%endfor%}
    policy-statement bgp-ecmp {
        then {
            load-balance per-packet;
        }
    }
    policy-statement bgp-underlay-in {
        then accept;
    }
    policy-statement bgp-underlay-out {
        term LOOPBACK {
            from {
                route-filter {{loopback_supernet}} longer;
            }
            then accept;
        }
        term IP_FABRIC_SUPERNET {
            from {
                route-filter {{ip_fabric_supernet}} longer;
            }
            then accept;
        }
        then reject;
    }
    /*Community definition*/
    community commEsi members {{target_esi}};
    {%- for TENANT in TENANTS %}
    community {{TENANTS[TENANT]['community_name']}} members {{TENANTS[TENANT]['target_evpn']}};
    {% for VNI in TENANTS[TENANT].VNIS %}community {{TENANTS[TENANT].VNIS[VNI]['community_name']}} members {{TENANTS[TENANT].VNIS[VNI]['community_name']}}
    {%endfor%}{%endfor%}
}
routing-instances {
{%- for TENANT in TENANTS %}
    {{TENANT}}_VRF {
        description "VRF to host {{TENANT}} networks";
        instance-type vrf;
        {%- for VNI in TENANTS[TENANT].VNIS %}
        interface {{TENANTS[TENANT].VNIS[VNI]['irb']}};{%endfor%}
        route-distinguisher {{loopback}}:{{TENANTS[TENANT]['rdID']}};
        vrf-target {{TENANTS[TENANT]['target_vrf']}};
    }
    {{TENANT}}_VS {
        description "Virtual switch attached to VRF {{TENANT}}_VRF";
        vtep-source-interface lo0.0;
        instance-type virtual-switch;
        route-distinguisher {{loopback}}:{{TENANTS[TENANT]['rdID']}};
        vrf-import TENANT1_LEAF_IN;
        vrf-target {{TENANTS[TENANT]['target_evpn']}};
        protocols {
            evpn {
                encapsulation vxlan;
                extended-vni-list [{% for VNI in TENANTS[TENANT].VNIS %} {{VNI}}{% endfor %} ];
                multicast-mode ingress-replication;
                default-gateway do-not-advertise;
            }
        }
        bridge-domains {
{%- for VNI in TENANTS[TENANT].VNIS %}
            bd{{TENANTS[TENANT].VNIS[VNI]['irb']}} {
                description "{{TENANT}} - Brdige Domain {{TENANTS[TENANT].VNIS[VNI]['irb']}}";
                domain-type bridge;
                vlan-id {{TENANTS[TENANT].VNIS[VNI]['irb']}};
                routing-interface irb.{{TENANTS[TENANT].VNIS[VNI]['irb']}};
                vxlan {
                    vni {{VNI}};
                    ingress-node-replication;
                }
            }{%endfor%}
        }
    }
{%endfor%}
}
